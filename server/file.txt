of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared
to ConWeave, CONGA, and ECMP, Gemma can achieve up
to 6%, 35%, 57% improvement for average FCT and 8%,
56%, 67% improvement for P99 FCT under 80% load. In
addition, other experiments fully demonstrate that Gemma has
good throughput, incurs relatively queue occupancy, possesses
excellent robustness and exhibits good scalability on three-
layer topology.
II. RELATED WORK AND MOTIVATION
Existing layer-3 load balancing algorithms can be classified
into three categories based on their traffic granularity.
Flow-based load balancing. Flow-based load balancing al-
gorithms [6]–[8] are favored for their simplicity and ease of
implementation, ensuring that all packets within the same
flow are transmitted along the same path. However, due to
their coarse scheduling granularity, these algorithms are less
responsive to rapid network state changes [9]. Additionally,
in scenarios with mixed traffic patterns involving both large
and small flows, flow-based load balancing may struggle to
distribute traffic evenly across links.
Flowlet-based load balancing. A flowlet is a set of con-
secutive packets wherein a flow is divided into multiple
segments, and the sending interval between each segment
exceeds a certain threshold [10]. Therefore, flowlet-based load
balancing algorithms [11], [12] can effectively avoid out-of-
order packets. However, compared to TCP/IP networks the
opportunity to find flowlets in RDMA network traffic is much
less, which makes flowlet-based approaches less efficient.
Packet-based load balancing. Packet-based load balancing
algorithms [5], [13]–[15] can theoretically achieve optimal
load balancing and make prompt rerouting decisions in re-
sponse to changes in the network state. However, this ap-
proach inevitably leads to out-of-order packet delivery, which
results in issues such as increased cache overhead and packet
retransmissions, thereby reducing transmission efficiency in
RDMA networks.
A. Our Motivations
Most of the existing load balancing algorithms are designed
for the TCP/IP protocol, and directly applying them to RDMA
networks can lead to numerous issues. These primarily re-
volve around the following two points:
Problem 1: Out-of-order packets heavily degrade the
performance of RDMA. To leverage RDMA over Ethernet
and IP networks, the RoCEv2 protocol is widely utilized. One
of its key design assumptions is that the network typically
experiences no packet loss or out-of-order delivery [16].
Consequently, it employs a go-back-N mechanism for loss
recovery. When a packet arrives out of order, the receiver
halts further packet acceptance at that point and signals the
sender to restart transmission from the lost packet. This means
that out-of-order packets can frequently trigger go-back-N
retransmissions, significantly impacting network transmission
efficiency. In contrast, the TCP protocol retransmits only the
specific lost packet upon detection of a loss, making the
performance impact of packet loss typically much more severe
in RDMA networks.
Problem 2: PFC pausing causes congestion in RDMA
networks. Another significant feature of the RoCEv2 protocol
is PFC (Priority-based Flow Control) pausing mechanism,
which facilitates lossless network transmission [17]. This
mechanism comes into effect when the ingress queue length
exceeds a predefined threshold, triggering PFC pausing. De-
spite its benefits, PFC pausing can introduce several issues,
including unfair traffic distribution, compromised flows, and
the potential for deadlock scenarios. Algorithms designed for
TCP/IP protocol are not optimized for handling PFC pausing,
which results in significant congestion within RDMA net-
works. Efforts to mitigate these issues have largely involved
research [18], [19] that necessitates modifications to network
interface cards, thereby hindering the broader adoption of
RDMA technology.
The motivation for our work comes from analysis of exist-
ing algorithms (Table I) and challenges encountered in load
balancing within RDMA networks. Thus, our work can be
summarized into the following two points: (i) Our algorithm
should be capable of automatically reordering packets to avoid
out-of-order packet issues. (ii) Our algorithm should promptly
detect path changes in real-time to minimize the occurrence
of PFC pausing.
n this paper, we design Gemma, a robust and path-aware
load balancing algorithm, to achieve efficient load balancing
in RDMA networks.
III. OVERVIEW
Gemma achieves high-throughput, fine-grained load bal-
ancing. In this section, we present the design of Gemma. First
we provide the key idea and system architecture of Gemma
as an overview (Section III-A), followed by workflow to
show how Gemma works (Section III-B) and how we extend
Gemma to the Fat-Tree topology (Section III-C). Finally, we
demonstrate the hardware feasibility of Gemma to ensure its
successful application in data centers. (Section III-D).
A. Overview of Gemma
The core idea of Gemma can be summarized into the
following three points.
1) Rerouting decisions: It is essential to promptly make
rerouting decisions to avoid overloading certain paths while
others remain underutilized. Gemma performs load balancing
at the packet granularity, scheduling the routing of each packet
individually. Upon detecting congestion on a path, Gemma
immediately initiates rerouting. This ensures that packets are
consistently directed towards less congested paths, thereby
balancing the utilization of network links.
2) Path awareness: Since networks are continually in
a state of dynamic change, real-time assessment of path
conditions is crucial for preventing PFC pausing and achiev-
ing effective load balancing. On the core switches, Gemma
frequently synchronizes egress queue information to the edge
switches. The synchronization frequency is adjusted based on
the perceived load to avoid impacting network bandwidth. On
the edge switches, Gemma evaluates the congestion status
of paths by combining local egress queue lengths with the
synchronized information.
3) Disorder processing: Rerouting inevitably results in
out-of-order packets, which must be addressed before they
reach the receiver. Gemma manages this issue on the receiving
edge switch, ensuring that packets are forwarded to the
receiver server in sequence, thus transparently resolving any
out-of-order delivery. Specifically, the switch utilizes its queue
pausing and resuming functions to hold early-arriving packets
until those sent prior have arrived. Once all packets have
arrived in the correct order, they are forwarded sequentially
to the receiver server.
As shown in Figure 2, Gemma evaluates the uplink path
from S0 to S1 using the egress queue length L1 of the port
connecting S0 to S1 on the sender’s edge switch, and the
downlink path from S1 to S3 using the egress queue length
L2 of the port connecting S1 to S3. The congestion level of the
path is quantified by the path congestion score: P athscore =
α ∗ L1 + β ∗ L2, where α and β represent the weights of
the upstream and downstream path information in the overall
path score, respectively.
However, the egress queue lengths are not directly ac-
cessible on the edge switch and need to be synchronised
through network communication (Section III-B-3). Therefore,
a downlink congestion table is maintained on the edge switch
to record the egress queue length for each core switch,
facilitating path evaluation. Gemma periodically scans this
downlink congestion table at fixed intervals to acquire real-
time information about downstream paths, thereby preventing
misjudgment in path evaluations.
2) Rerouting: Gemma promptly performs rerouting based
on the path congestion score. The Gemma path-score-based
routing policy is implemented on the edge switch and is
triggered upon the arrival of a packet. If the current packet
is in a new flow, a random path is selected for forwarding.
Otherwise, the congestion status of the currently selected
path is determined, and Gemma categorizes the path into
two states: smooth or congested, using a fractional threshold
Sreroute. For congested paths, among all available alterna-
tives, smooth paths are chosen, or paths with scores lower
than the current path by more than a specified threshold are
selected as alternative routes. Ultimately, the path with the
lowest score among these alternatives is chosen for forwarding
to minimize multiple reroutes. If no alternative paths are
available, no rerouting is performed.
3) Congestion Information Synchronisation: As described
in the previous subsection, evaluating a path on the edge
switch requires two pieces of information: the egress queue
length of the local switch and the core switch, while the latter
needs to be synchronised through network communication.
Abstract—Load balancing in Remote Direct Memory Access
(RDMA) networks is critical to network performance. Despite
numerous load balancing algorithms devised to optimize multiple
end-to-end links in data centers, they falter in RDMA networks
due to unawareness of out-of-order packets and PFC pausing.
Motivated by the above two issues, this paper proposes Gemma,
a robust and path-aware load balancing algorithm. Gemma
prevents out-of-order packets by proactively suspending and
resuming the transmission of switch queues, thereby avoiding
the performance degradation caused by retransmissions of out-
of-order packets. In addition, Gemma leverages egress queue
length as a path state indicator, integrating synchronized lengths
from local and remote switches to comprehensively assess path
congestion and facilitate prompt, effective rerouting to prevent
frequently triggering PFC pausing. Moreover, Gemma can be
extended to the Fat-Tree topology with a module that facilitates
per-hop rerouting decisions on uplink paths, thereby enhancing
scalability. Experiments show that compared to ConWeave,
CONGA, and ECMP, Gemma achieves a 6%, 35%, and 57%
improvement for average FCT under 80% load, which fully
demonstrates the efficiency and feasibility of our proposed
scheme.

RDMA is a high-performance data transfer technology
that bypasses the operating system’s network stack, enabling
direct access to the memory of a remote computer without
CPU intervention [1]. Compared with the traditional TCP/IP
protocol, RDMA offers lower latency and higher bandwidth,
effectively improving network throughput and performance.
In summary, designing an efficient Layer-3 load balancing
mechanism within the context of a data center’s multi-path
network environment, along with integrating RDMA applica-
tions, has become an important research topic.
However, most load balancing algorithms are designed for
the TCP/IP protocol and encounter numerous issues when
directly implemented in RDMA networks, including retrans-
mission problems caused by out-of-order packets and the
frequent triggering of PFC pausing. Therefore, these issues
serve as the motivations for our work.
In this paper, we design Gemma, a robust load balancing
algorithm that well fits RDMA networks, which performs load
balancing in the granularity of packets. To prevent out-of-
order packets, Gemma utilizes the switch’s queuing resources
to manage such packets by suspending and resuming the prior-
ity queue [2], thereby avoiding backoff and retransmission. To
prevent triggering PFC pausing, Gemma distributes traffic in a
path-aware manner. This approach comprehensively evaluates
the congestion status of each path and reroutes packets by
monitoring local egress queues and the synchronized egress
queue lengths of other switches. Gemma can not only be well
applied to the leaf-spine network, but also be extended to
multi-layer topologies, such as Fat-Tree.
We evaluate Gemma via software simulations on ns-3
simulator [3]. Overall, Gemma’s performance not only far sur-
passes traditional load balancing algorithms like ECMP and
CONGA [4], but also outperforms the state-of-the-art algo-
rithm Conweave [5] designed for RDMA networks. Compared